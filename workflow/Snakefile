# Workflow 3DChromTrans: For  measuring distances between two types of markers in Chromosomal Translocation
#
# The Fluorescence In Situ Hybridization (FISH) assay were carried out
# with the following probes:
# * Fluorophore=Texas Red, Emission Wavelength=614nm
# * Fluorophore=Alexa Fluor 488, Emission Wavelength=517nm
# For nuclei detection, cells were stained with
# * DAPI, Emission Wavelength=465nm
#
# Images were acquires with ZEISS LMS 980 microscope.
# Objective Immersion="Oil" LensNA="1.4"
# Model="Plan-Apochromat 63x/1.4 Oil DIC (UV) VIS-IR M27"
# NominalMagnification="63"
# WorkingDistance="193.0" WorkingDistanceUnit="um"
# Zoom="3.6"
# Voxel Size: 0.073x0.073x0.130
#
# Acquired images should be chromatic corrected before going to the workflow
# execution. This can be done by installing and executing "Chromagnon"
# software and set the output as delta vision file format (.dv)
#
# Enviroment activation
# >> conda activate snakemake
#
# Create required environments for workflow execution
# >> snakemake --core all --use-conda --conda-create-envs-only Data_Analysis
#
# Visualizing the DAG of jobs
# >> snakemake --dag Data_Analysis | dot -Tpdf > dag.pdf
#
# Execution of a workflow with snakemake
# >> snakemake --cores all --use-conda Data_Analysis
#
# In case of partial execution is possible to rerun the workflow
# >> snakemake --cores all --use-conda --rerun-incomplete Data_Analysis
#
# Report generation
# >> pip install pygments
# >> snakemake Data_Analysis --report report.html
#
#
# Author: Raul gomez-Riera
# contact: raul.gomez@crg.es



from snakemake.utils import min_version
from tkinter.filedialog import askdirectory
import platform
import os
import sys

min_version("7.24.0")

bold = "\033[1m"
green = "\033[92m"
cyan = "\033[36m"
red =  "\033[31m"
end = "\033[0m"


msg = f"""{green}{bold}Thanks for using 3DChromTrans and please remember to cite the tool!{end}{end}
    {cyan} Author: Raul Gomez-Riera.
     GitHub: https://github.com/rgomez-AI/3DChromTrans           
    {end}
"""

sys.stderr.write(msg)

report: "report/workflow.rst"

OS = platform.system()

if OS == "Linux":
    sep = os.path.sep
    conda_fiji = "envs" + sep + "fiji.yaml"
    shell_split = "mkdir SPLIT ; ImageJ --update update ; ImageJ --headless -macro {input[0]} {input[1]},{output}"
    shell_reslice = "mkdir RESLICE ; ImageJ --headless -macro {input[0]} {input[1]},{output},{params}"
    shell_label = "mkdir CP_DATASET ; ImageJ --headless -macro {input[0]} {input[1]},{output} ; cp RESLICE/*ch0[0-1].tif {output}"
    conda_cellprofiler = "envs" + sep + "cellprofiler.yaml"
    shell_cellprofiler = "mkdir CP_OUT ; cellprofiler -c -r -p {input[0]} -o {output} -i {input[1]}"
    conda_R = "envs" + sep + "R.yaml"
    shell_Analysis = "mkdir DummyDir ; Rscript {input[0]} {input[1]} {params.voxel}"
    shell_Analysis_final = "mkdir -p ../results ; ImageJ -macro {input[0]} {input[1]} ; cp {input[1]}/*.xlsx ../results/ ; rm -R DummyDir/"

else:
    msg = f"""{red}\n Warning: It run on linux platform only\n {end}"""
    sys.stderr.write(msg)
    sys.exit()

dirpath = os.getcwd()

if sys.argv[4] != "--conda-create-envs-only":
    currentDirectory = os.getcwd()
    dirpath = askdirectory(initialdir=currentDirectory, title="Select Images Directory")

localrules:
    split_channels,
    reslice_scale,
    cellpose,
    label_conversion,
    cellprofiler,
    Data_Analysis,


rule all:
    input:
        "report.html"

rule split_channels:
    input:
        "scripts" + sep + "DVsplit_headless.ijm",
        dirpath,
    output:
        directory("SPLIT"),
    conda:
        conda_fiji
    shell:
        shell_split


rule reslice_scale:
    input:
        "scripts" + sep + "ResliceZandScale_headless.ijm",
        "SPLIT",
    params:
        "1",
    output:
        directory("RESLICE"),
    conda:
        conda_fiji
    shell:
        shell_reslice


rule cellpose:
    input:
        "RESLICE",
    output:
        directory("MASKS"),
    params:
        dim="120",  # nucleus diameter in pixels
        thr="0.4",  # Flow threshold
    conda:
        "envs" + sep + "cellpose.yaml"
    shell:
        "python -m cellpose --dir {input} --img_filter _ch02 --z_axis 0 --pretrained_model nuclei --diameter {params.dim} --flow_threshold {params.thr} --do_3D --min_size 400 --fast_mode --exclude_on_edges --use_gpu --save_tif --no_npy --savedir {output} --verbose"


rule label_conversion:
    input:
        "scripts" + sep + "LabelConversions_headless.ijm",
        "MASKS",
        rules.reslice_scale.output,
    output:
        directory("CP_DATASET"),
    conda:
        conda_fiji
    shell:
        shell_label


rule cellprofiler:
    input:
        "scripts" + sep + "3D_Distance_LowResolution.cppipe",
        "CP_DATASET",
    output:
        directory("CP_OUT"),
    conda:
        conda_cellprofiler
    shell:
        shell_cellprofiler



localrules: R
rule R:
    input:
        "scripts" + sep + "DataAnalysis_headless.R",
            rules.cellprofiler.output,
    output:
        directory("DummyDir")
    params:
        voxel="0.0731",  # Voxel Size in microns
    conda:
        conda_R
    shell:
        shell_Analysis

rule Data_Analysis:
    input:
        "scripts" + sep + "labeled2Dist_headless.ijm",
        rules.cellprofiler.output,
        rules.R.output,
    output:
        report(directory("../results"), patterns=["{name}.xlsx"]),
    conda:
        conda_fiji
    shell:
        shell_Analysis_final
